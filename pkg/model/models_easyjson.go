// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel(l, v)
}
func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel1(in *jlexer.Lexer, out *UnitGrade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "unit_id":
			out.UnitID = int(in.Int())
		case "advance_id":
			out.AdvanceID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel1(out *jwriter.Writer, in UnitGrade) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"unit_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UnitID))
	}
	{
		const prefix string = ",\"advance_id\":"
		out.RawString(prefix)
		out.Int(int(in.AdvanceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnitGrade) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnitGrade) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnitGrade) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnitGrade) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel1(l, v)
}
func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel2(in *jlexer.Lexer, out *Unit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "detach_id":
			out.DetachmentID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "unit_type":
			out.UnitType = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "keywords":
			if in.IsNull() {
				in.Skip()
				out.Keywords = nil
			} else {
				in.Delim('[')
				if out.Keywords == nil {
					if !in.IsDelim(']') {
						out.Keywords = make([]string, 0, 4)
					} else {
						out.Keywords = []string{}
					}
				} else {
					out.Keywords = (out.Keywords)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Keywords = append(out.Keywords, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "experience":
			out.Experience = int(in.Int())
		case "crusade_points":
			out.CrusadePoints = int(in.Int())
		case "power_level":
			out.PowerLevel = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel2(out *jwriter.Writer, in Unit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"detach_id\":"
		out.RawString(prefix)
		out.Int(int(in.DetachmentID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"unit_type\":"
		out.RawString(prefix)
		out.String(string(in.UnitType))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"keywords\":"
		out.RawString(prefix)
		if in.Keywords == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Keywords {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"experience\":"
		out.RawString(prefix)
		out.Int(int(in.Experience))
	}
	{
		const prefix string = ",\"crusade_points\":"
		out.RawString(prefix)
		out.Int(int(in.CrusadePoints))
	}
	{
		const prefix string = ",\"power_level\":"
		out.RawString(prefix)
		out.Int(int(in.PowerLevel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Unit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Unit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Unit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Unit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel2(l, v)
}
func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel3(in *jlexer.Lexer, out *Tally) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "tally":
			out.Tally = int(in.Int())
		case "value":
			out.Value = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel3(out *jwriter.Writer, in Tally) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"tally\":"
		out.RawString(prefix)
		out.Int(int(in.Tally))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Int(int(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tally) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tally) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tally) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tally) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel3(l, v)
}
func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel4(in *jlexer.Lexer, out *EventTallies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event_id":
			out.EventID = int(in.Int())
		case "tally_id":
			out.TallyID = int(in.Int())
		case "unit_id":
			out.UnitID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel4(out *jwriter.Writer, in EventTallies) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.EventID))
	}
	{
		const prefix string = ",\"tally_id\":"
		out.RawString(prefix)
		out.Int(int(in.TallyID))
	}
	{
		const prefix string = ",\"unit_id\":"
		out.RawString(prefix)
		out.Int(int(in.UnitID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventTallies) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventTallies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventTallies) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventTallies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel4(l, v)
}
func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel5(in *jlexer.Lexer, out *Detachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "army_id":
			out.ArmyID = int(in.Int())
		case "fraction":
			out.Fraction = string(in.String())
		case "cp_cost":
			out.CpCost = int(in.Int())
		case "detach_type":
			out.DetachmentType = Detach(in.String())
		case "power_level":
			out.PowerLevel = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel5(out *jwriter.Writer, in Detachment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"army_id\":"
		out.RawString(prefix)
		out.Int(int(in.ArmyID))
	}
	{
		const prefix string = ",\"fraction\":"
		out.RawString(prefix)
		out.String(string(in.Fraction))
	}
	{
		const prefix string = ",\"cp_cost\":"
		out.RawString(prefix)
		out.Int(int(in.CpCost))
	}
	{
		const prefix string = ",\"detach_type\":"
		out.RawString(prefix)
		out.String(string(in.DetachmentType))
	}
	{
		const prefix string = ",\"power_level\":"
		out.RawString(prefix)
		out.Int(int(in.PowerLevel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Detachment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Detachment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Detachment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Detachment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel5(l, v)
}
func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel6(in *jlexer.Lexer, out *CampaignPlayers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "campaign_id":
			out.CampaignID = int(in.Int())
		case "u_role":
			out.U_role = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel6(out *jwriter.Writer, in CampaignPlayers) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"campaign_id\":"
		out.RawString(prefix)
		out.Int(int(in.CampaignID))
	}
	{
		const prefix string = ",\"u_role\":"
		out.RawString(prefix)
		out.String(string(in.U_role))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CampaignPlayers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CampaignPlayers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CampaignPlayers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CampaignPlayers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel6(l, v)
}
func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel7(in *jlexer.Lexer, out *CampaignEvents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event_id":
			out.EventID = int(in.Int())
		case "campaign_id":
			out.CampaignID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel7(out *jwriter.Writer, in CampaignEvents) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.EventID))
	}
	{
		const prefix string = ",\"campaign_id\":"
		out.RawString(prefix)
		out.Int(int(in.CampaignID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CampaignEvents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CampaignEvents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CampaignEvents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CampaignEvents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel7(l, v)
}
func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel8(in *jlexer.Lexer, out *CampaignEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "number":
			out.Number = int(in.Int())
		case "player_one":
			out.Player1 = int(in.Int())
		case "player_two":
			out.Player2 = int(in.Int())
		case "victor":
			out.Victor = int(in.Int())
		case "lore":
			out.Lore = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel8(out *jwriter.Writer, in CampaignEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.Int(int(in.Number))
	}
	{
		const prefix string = ",\"player_one\":"
		out.RawString(prefix)
		out.Int(int(in.Player1))
	}
	{
		const prefix string = ",\"player_two\":"
		out.RawString(prefix)
		out.Int(int(in.Player2))
	}
	{
		const prefix string = ",\"victor\":"
		out.RawString(prefix)
		out.Int(int(in.Victor))
	}
	{
		const prefix string = ",\"lore\":"
		out.RawString(prefix)
		out.String(string(in.Lore))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CampaignEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CampaignEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CampaignEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CampaignEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel8(l, v)
}
func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel9(in *jlexer.Lexer, out *CampaignAchievements) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "achievement_id":
			out.AchievementID = string(in.String())
		case "campaign_id":
			out.CampaignID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel9(out *jwriter.Writer, in CampaignAchievements) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"achievement_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AchievementID))
	}
	{
		const prefix string = ",\"campaign_id\":"
		out.RawString(prefix)
		out.Int(int(in.CampaignID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CampaignAchievements) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CampaignAchievements) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CampaignAchievements) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CampaignAchievements) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel9(l, v)
}
func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel10(in *jlexer.Lexer, out *Campaign) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "descr":
			out.Descr = string(in.String())
		case "is_public":
			out.IsPublic = bool(in.Bool())
		case "starting_pl":
			out.StartingPL = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel10(out *jwriter.Writer, in Campaign) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"descr\":"
		out.RawString(prefix)
		out.String(string(in.Descr))
	}
	{
		const prefix string = ",\"is_public\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"starting_pl\":"
		out.RawString(prefix)
		out.Int(int(in.StartingPL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Campaign) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Campaign) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Campaign) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Campaign) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel10(l, v)
}
func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel11(in *jlexer.Lexer, out *Army) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		case "campaign_id":
			out.CampaignID = int(in.Int())
		case "lore":
			out.Lore = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "supply_limit":
			out.SupplyLimit = int(in.Int())
		case "supply_used":
			out.SupplyUsed = int(in.Int())
		case "available_cp":
			out.AvailableCP = int(in.Int())
		case "validated":
			out.Validated = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel11(out *jwriter.Writer, in Army) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"campaign_id\":"
		out.RawString(prefix)
		out.Int(int(in.CampaignID))
	}
	{
		const prefix string = ",\"lore\":"
		out.RawString(prefix)
		out.String(string(in.Lore))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"supply_limit\":"
		out.RawString(prefix)
		out.Int(int(in.SupplyLimit))
	}
	{
		const prefix string = ",\"supply_used\":"
		out.RawString(prefix)
		out.Int(int(in.SupplyUsed))
	}
	{
		const prefix string = ",\"available_cp\":"
		out.RawString(prefix)
		out.Int(int(in.AvailableCP))
	}
	{
		const prefix string = ",\"validated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Validated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Army) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Army) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Army) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Army) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel11(l, v)
}
func easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel12(in *jlexer.Lexer, out *Advancement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "adv_type":
			out.AdvType = string(in.String())
		case "descr":
			out.Descr = string(in.String())
		case "crus_cost":
			out.CrusCost = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel12(out *jwriter.Writer, in Advancement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"adv_type\":"
		out.RawString(prefix)
		out.String(string(in.AdvType))
	}
	{
		const prefix string = ",\"descr\":"
		out.RawString(prefix)
		out.String(string(in.Descr))
	}
	{
		const prefix string = ",\"crus_cost\":"
		out.RawString(prefix)
		out.Int(int(in.CrusCost))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Advancement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Advancement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Advancement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Advancement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComTheTh1rt33nthNexusOctoEnginePkgModel12(l, v)
}
